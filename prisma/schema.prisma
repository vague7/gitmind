// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageUrl  String?
    firstName String?
    lastName  String?

    emailAddress String @unique

    credits        Int             @default(200)
    userToProjects UserToProject[]
    questionsAsked  Question[]
    stripeTransactions  StripeTransaction[]
}

model Project {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    githubToken  String?
    name      String
    githubUrl String

    deletedAt DateTime?

    userToProjects UserToProject[]
    commits        Commit[]
    sourceCodeEmbeddings  SourceCodeEmbedding[]
    savedQuestions  Question[]
    Meetings Meeting[]
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    projectId String

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

model Meeting{
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    meetingUrl String
    name String
    status MeetingStatus @default(PROCESSING)

    projectId String
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    issues Issue[]
}

enum MeetingStatus{
    PROCESSING
    COMPLETED
    
}


model Issue{
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start String
    end String
    gist String
    headline String
    summary String
    meetingId String
    meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}


model StripeTransaction{
    id    String     @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId   String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) 

    credits Int
    
}

model SourceCodeEmbedding {
    id  String @id @default(cuid())
    summaryEmbedding  Unsupported("vector(768)")?
    sourceCode  String
    fileName  String
    summary  String

    projectId  String
    project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question{
    id  String @id  @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    question  String
    answer  String

    filesReferences   Json?

    projectId  String
    project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    userId  String
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Commit {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    projectId String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

    commitMessage      String
    commitHash         String  @unique
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String
}
